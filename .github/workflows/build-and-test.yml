name: Build and Test ICU4C

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # x86-64 Build Job
  build-library-linux-x86-64:
    name: Build (Linux x86-64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set non-interactive frontend
        run: echo 'DEBIAN_FRONTEND=noninteractive' >> $GITHUB_ENV

      - name: Run on x86-64
        run: |
          chmod +x *.sh
          mkdir -p build
          mkdir -p dist

          echo "Ensure build environment ..."
          sudo ./ensure-linux-x86-build-environment.sh
          
          echo "Build ..."
          ./build-linux-x86-64.sh
            
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: icu4c-linux-x86-64
          path: dist/icu4c-*_linux-x86-64_*.zip
          if-no-files-found: error
          retention-days: 1

  # x86-64 Build Test Job
  build-test-x86-64:
    name: Build Test (Linux x86-64)
    needs: build-library-linux-x86-64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set non-interactive frontend
        run: echo 'DEBIAN_FRONTEND=noninteractive' >> $GITHUB_ENV

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: icu4c-linux-x86-64
          path: dist

      - name: Run on x86-64
        run: |
          pushd tests

          chmod +x *.sh
          mkdir -p build
          
          echo "Ensure build environment ..."
          sudo ./ensure-linux-x86-build-test-environment.sh

          echo "Build simple test ..."
          DIST_FILE=$(find ../dist -name 'icu4c-*_linux-x86-64_*.zip' -type f)
          ./build-simple-test-linux-x86-64.sh "$DIST_FILE"

          popd

      - name: Upload test artifact
        uses: actions/upload-artifact@v4
        with:
          name: icu4c-linux-x86-64-test
          path: tests/simple-test
          if-no-files-found: error
          retention-days: 1

  # x86-64 Run Test Job
  run-test-x86-64:
    name: Run Test (Linux x86-64)
    needs: build-test-x86-64
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: icu4c-linux-x86-64-test

      - name: Install dependencies
        run: |
            # Install minimal dependencies for testing
            sudo apt-get update
            sudo apt-get install -y libfmt-dev    # Do this for now, we should wap this in another project

            chmod +x simple-test
            ./simple-test
  
  # ARM-64 Build Job
  build-arm-64:
    name: Build (Linux ARM-64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set non-interactive frontend
        run: echo 'DEBIAN_FRONTEND=noninteractive' >> $GITHUB_ENV

      - name: Run on ARM-64
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: ubuntu22.04
          run: |
            # Set environment variables
            export CLANG_VERSION=20

            # Install dependencies
            apt-get update
            apt-get install -y      \
              autoconf                   \
              automake                   \
              build-essential            \
              cmake                      \
              curl                       \
              gnupg                      \
              lsb-release                \
              pkg-config                 \
              python3                    \
              software-properties-common \
              unzip                      \
              wget                       \
              zip
            
            # Install LLVM/Clang
            wget https://apt.llvm.org/llvm.sh
            chmod +x llvm.sh || true
            ./llvm.sh ${CLANG_VERSION}
            rm llvm.sh

            apt-get update
            apt-get install -y libc++-20-dev libc++abi-20-dev

            # Create symlinks for clang and LLVM tools to be available without version suffix
            update-alternatives --install /usr/bin/clang   clang   /usr/bin/clang-${CLANG_VERSION}   100
            update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${CLANG_VERSION} 100
            update-alternatives --set                      clang   /usr/bin/clang-${CLANG_VERSION}
            update-alternatives --set                      clang++ /usr/bin/clang++-${CLANG_VERSION}
            ln -sf /usr/bin/llvm-ar-${CLANG_VERSION} /usr/bin/llvm-ar
            ln -sf /usr/bin/llvm-ranlib-${CLANG_VERSION} /usr/bin/llvm-ranlib
            
            echo "Setup LLVM/Clang"
            echo "Clang       version: "$(clang   --version)
            echo "Clang++     version: "$(clang++ --version)
            echo "LLVM-ar     version: "$(llvm-ar-${CLANG_VERSION}     --version)
            echo "LLVM-ranlib version: "$(llvm-ranlib-${CLANG_VERSION} --version)
            
            echo "Build ICU4C"
            ./build-linux-arm-64.sh
            
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: icu4c-linux-arm-64
          path: dist/icu4c-*_linux-arm-64_*.zip
          if-no-files-found: error
          retention-days: 1

  # ARM-64 Build Test Job
  build-test-arm-64:
    name: Build Test (Linux ARM-64)
    needs: build-arm-64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set non-interactive frontend
        run: echo 'DEBIAN_FRONTEND=noninteractive' >> $GITHUB_ENV

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: icu4c-linux-arm-64
          path: dist

      - name: Run on ARM-64
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: ubuntu22.04
          run: |
            # Set environment variables
            export CLANG_VERSION=20

            # Install minimal dependencies for testing
            apt-get update
            apt-get install -y           \
              autoconf                   \
              automake                   \
              build-essential            \
              cmake                      \
              curl                       \
              gnupg                      \
              libfmt-dev                 \
              lsb-release                \
              pkg-config                 \
              python3                    \
              software-properties-common \
              unzip                      \
              wget                       \
              zip                        \

            
            # Install LLVM/Clang
            wget https://apt.llvm.org/llvm.sh
            chmod +x llvm.sh || true
            ./llvm.sh ${CLANG_VERSION}
            rm llvm.sh

            apt-get update
            apt-get install -y libc++-${CLANG_VERSION}-dev libc++abi-${CLANG_VERSION}-dev

            # Create symlinks for clang and LLVM tools to be available without version suffix
            update-alternatives --install /usr/bin/clang   clang   /usr/bin/clang-${CLANG_VERSION}   100
            update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${CLANG_VERSION} 100
            update-alternatives --set                      clang   /usr/bin/clang-${CLANG_VERSION}
            update-alternatives --set                      clang++ /usr/bin/clang++-${CLANG_VERSION}
            ln -sf /usr/bin/llvm-ar-${CLANG_VERSION} /usr/bin/llvm-ar
            ln -sf /usr/bin/llvm-ranlib-${CLANG_VERSION} /usr/bin/llvm-ranlib

            echo "Setup LLVM/Clang"
            echo "Clang       version: "$(clang   --version)
            echo "Clang++     version: "$(clang++ --version)
            echo "LLVM-ar     version: "$(llvm-ar-${CLANG_VERSION}     --version)
            echo "LLVM-ranlib version: "$(llvm-ranlib-${CLANG_VERSION} --version)

            mkdir -p tests/build
            DIST_FILE=$(find dist -name 'icu4c-*_linux-arm-64_*.zip' -type f)
            unzip -o "$DIST_FILE" -d tests/build

            cd tests
            ./build-simple-test-linux-arm-64.sh "../$DIST_FILE"

      - name: Upload test artifact
        uses: actions/upload-artifact@v4
        with:
          name: icu4c-linux-arm-64-test
          path: tests/simple-test
          if-no-files-found: error
          retention-days: 1

  # ARM-64 Run Test Job
  run-test-arm-64:
    name: Run Test (Linux ARM-64)
    needs: build-test-arm-64
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: icu4c-linux-arm-64-test

      - name: Install dependencies
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: ubuntu22.04
          run: |
            # Install minimal dependencies for testing
            apt-get update
            apt-get install -y libfmt-dev    # Do this for now, we should wap this in another project

            chmod +x simple-test
            ./simple-test
            
  # Windows x86-64 Build Job
  build-windows-x86-64:
    name: Build (Windows x86-64)
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup PowerShell Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
        
      - name: Install LLVM and Clang
        run: |
          # Install LLVM and Clang using Chocolatey
          choco install llvm -y
          
          # Add LLVM to PATH
          echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Display versions
          Write-Host "Clang version: $(clang --version)"
          Write-Host "Clang++ version: $(clang++ --version)"
        shell: pwsh
      
      - name: Build ICU4C for Windows
        run: |
          # Set environment variables
          $env:CLANG_VERSION = "20"
          
          # Build ICU4C using PowerShell script
          .\build-windows-x86-64.ps1
        shell: pwsh
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: icu4c-windows-x86-64
          path: dist/icu4c-*_windows-x86-64_*.zip
          if-no-files-found: error
          retention-days: 1

  # Windows x86-64 Build Test Job
  build-test-windows-x86-64:
    name: Build Test (Windows x86-64)
    needs: build-windows-x86-64
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup PowerShell Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: icu4c-windows-x86-64
          path: dist

      - name: Install LLVM and Clang
        run: |
          # Install LLVM and Clang using Chocolatey
          choco install llvm -y
          
          # Add LLVM to PATH
          echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Display versions
          Write-Host "Clang version: $(clang --version)"
          Write-Host "Clang++ version: $(clang++ --version)"
        shell: pwsh

      - name: Build Test
        run: |
          # Set environment variables
          $env:CLANG_VERSION = "20"
          
          # Find the distribution file
          $DIST_FILE = Get-ChildItem -Path dist -Filter "icu4c-*_windows-x86-64_*.zip" -File | Select-Object -First 1 -ExpandProperty FullName
          
          # Build the test
          cd tests
          .\build-simple-test-windows-x86-64.ps1 "..\$DIST_FILE"
        shell: pwsh

      - name: Upload test artifact
        uses: actions/upload-artifact@v4
        with:
          name: icu4c-windows-x86-64-test
          path: tests/simple-test.exe
          if-no-files-found: error
          retention-days: 1

  # Windows x86-64 Run Test Job
  run-test-windows-x86-64:
    name: Run Test (Windows x86-64)
    needs: build-test-windows-x86-64
    runs-on: windows-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: icu4c-windows-x86-64-test

      - name: Run test
        run: |
          # Run the test executable
          .\simple-test.exe
        shell: pwsh
